diff -urN Python-2.2.1.orig/Lib/os.py Python-2.2.1/Lib/os.py
--- Python-2.2.1.orig/Lib/os.py	Sat Mar 16 19:02:20 2002
+++ Python-2.2.1/Lib/os.py	Sun Sep  8 13:30:51 2002
@@ -308,8 +308,9 @@
 
 __all__.extend(["execl","execle","execlp","execlpe","execvp","execvpe"])
 
-_notfound = None
 def _execvpe(file, args, env=None):
+    from errno import ENOENT, ENOTDIR
+
     if env is not None:
         func = execve
         argrest = (args, env)
@@ -317,7 +318,7 @@
         func = execv
         argrest = (args,)
         env = environ
-    global _notfound
+
     head, tail = path.split(file)
     if head:
         apply(func, (file,) + argrest)
@@ -327,30 +328,14 @@
     else:
         envpath = defpath
     PATH = envpath.split(pathsep)
-    if not _notfound:
-        if sys.platform[:4] == 'beos':
-            #  Process handling (fork, wait) under BeOS (up to 5.0)
-            #  doesn't interoperate reliably with the thread interlocking
-            #  that happens during an import.  The actual error we need
-            #  is the same on BeOS for posix.open() et al., ENOENT.
-            try: unlink('/_#.# ## #.#')
-            except error, _notfound: pass
-        else:
-            import tempfile
-            t = tempfile.mktemp()
-            # Exec a file that is guaranteed not to exist
-            try: execv(t, ('blah',))
-            except error, _notfound: pass
-    exc, arg = error, _notfound
     for dir in PATH:
         fullname = path.join(dir, file)
         try:
             apply(func, (fullname,) + argrest)
         except error, (errno, msg):
-            if errno != arg[0]:
-                exc, arg = error, (errno, msg)
-    raise exc, arg
-
+            if errno != ENOENT and errno != ENOTDIR:
+                raise
+    raise error, (errno, msg)
 
 # Change environ to automatically call putenv() if it exists
 try:
diff -urN Python-2.2.1.orig/Modules/Setup.dist Python-2.2.1/Modules/Setup.dist
--- Python-2.2.1.orig/Modules/Setup.dist	Wed Oct 17 15:46:28 2001
+++ Python-2.2.1/Modules/Setup.dist	Sun Sep  8 13:32:07 2002
@@ -97,6 +97,7 @@
 # setup.py script in the root of the Python source tree.
 
 posix posixmodule.c		# posix (UNIX) system calls
+errno errnomodule.c		# posix (UNIX) errno values
 _sre _sre.c			# Fredrik Lundh's new regular expressions
 new newmodule.c			# Tommy Burnette's 'new' module
 
@@ -166,7 +167,6 @@
 #fcntl fcntlmodule.c	# fcntl(2) and ioctl(2)
 #pwd pwdmodule.c		# pwd(3) 
 #grp grpmodule.c		# grp(3)
-#errno errnomodule.c	# posix (UNIX) errno values
 #select selectmodule.c	# select(2); not on ancient System V
 
 # Memory-mapped files (also works on Win32).
diff -urN Python-2.2.1.orig/setup.py Python-2.2.1/setup.py
--- Python-2.2.1.orig/setup.py	Sun Sep  8 13:10:43 2002
+++ Python-2.2.1/setup.py	Sun Sep  8 13:32:38 2002
@@ -273,8 +273,6 @@
         exts.append( Extension('pwd', ['pwdmodule.c']) )
         # grp(3)
         exts.append( Extension('grp', ['grpmodule.c']) )
-        # posix (UNIX) errno values
-        exts.append( Extension('errno', ['errnomodule.c']) )
         # select(2); not on ancient System V
         exts.append( Extension('select', ['selectmodule.c']) )
 
